
import ast
from string import capwords
from enaml.core.api import Include
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import (
    CheckBox, ComboBox, DateSelector, Field, Form, Container,
    Label, PushButton, SpinBox, TimeSelector, Window)
from enaml.layout.layout_helpers import align, vertical, horizontal, spacer  
from enaml.validator import Validator, Bool
from atom.api import Bool, Str, Value    
from atom.api import (Bool, Enum, Float, Int, Range, Unicode, Str,
                      FloatRange, Long)
from utils import MInfo, _Partial


def _get_editor(model, name):
    minfo = MInfo(model, name)
    factory = ATOM2ENAML.get(type(minfo.member), ATOM2ENAML[DefaultEditor])
    editor = factory(minfo.member)
    return editor(minfo=minfo)


def _update_widget(widget, minfo):
    if not isinstance(minfo, MInfo):
        if isinstance(minfo, tuple) and len(minfo) == 2:
            widget.minfo = minfo = MInfo(model=minfo[0], name=minfo[1])
        else:
            raise TypeError("minfo must be of type MInfo or a tuple of (model, name)")
    widget.label.text = capwords(minfo.name.replace('_', ' '))
    widget.editor = _get_editor(minfo.model, minfo.name)
    for w in [widget.label, widget.editor]:
        w.tool_tip = widget.tool_tip
        w.status_tip = widget.status_tip
        w.font = widget.font


enamldef AutoItem(Form): _item:
    attr minfo
    attr editor = Field()
    attr centerline = 0.3
    padding = 0
    constraints = [lbl.width == editor.width * centerline]
    alias label: lbl
    Label: lbl: pass
    Include: inc: 
        objects << [editor]
    initialized :: _update_widget(_item, minfo)
    minfo :: _update_widget(_item, minfo)


def _set_auto_view(model, mitems, centerline):
    items = []
    if mitems is None:
        mitems = [m for m in model.members() if not m.startswith('_')]
        mitems = sorted(mitems)
    for mitem in mitems:
        if isinstance(mitem, str):
            items.append(AutoItem(minfo=MInfo(model, mitem), 
                                  centerline=centerline))
        elif isinstance(mitem, _Partial):
            minfo = MInfo(model, mitem.name)
            items.append(AutoItem(minfo=minfo, centerline=centerline,
                                  **mitem.kwargs))
        else:
            items.append(mitem)
    return items


enamldef AutoView(Container):
    attr model
    attr mitems
    attr centerline = 0.3
    padding = 5
    alias objects: inc.objects
    Include: inc: 
        objects << _set_auto_view(model, mitems, centerline)


enamldef AutoWindow(Window): _win:
    attr model
    title = "Edit Properties"
    Include:
        objects << [AutoItem(MInfo(model, name)) 
                    for name in sorted(model.members.keys()) 
                    if not name.startswith('_')]


enamldef _AutoView(Container): _view:
    attr objects
    padding = 5
    Include: objects << _view.objects


enamldef _AutoWindow(Window): _win:
    attr view
    title = "Edit Properties"
    Include: objects << [_win.view]


enamldef BoolEditor(CheckBox):
    attr minfo
    checked := getattr(minfo.model, minfo.name)


enamldef EnumEditor(ComboBox):
    attr minfo
    index << minfo.validator.index(getattr(minfo.model, minfo.name))
    index ::
        item_value = minfo.validator[self.index]
        setattr(minfo.model, minfo.name, item_value)
    items = list(minfo.validator)


enamldef FloatEditor(FloatField):
    attr minfo
    value := getattr(minfo.model, minfo.name)


enamldef FloatRangeEditor(FloatField):
    attr minfo
    value := getattr(minfo.model, minfo.name)
    minimum = minfo.validator[0]
    maximum = minfo.validator[1]


enamldef IntEditor(IntField):
    attr minfo
    value << int(getattr(minfo.model, minfo.name))
    value :: setattr(minfo.model, minfo.name, int(value))


enamldef IntRangeEditor(SpinBox):
    attr minfo
    value := getattr(minfo.model, minfo.name)
    minimum = minfo.validator[0]
    maximum = minfo.validator[1]


enamldef StrEditor(Field):
    attr minfo
    text := getattr(minfo.model, minfo.name)


class DefaultValidator(Validator):
    minfo = Value()

    def validate(self, text):
        attr = getattr(self.minfo.model, self.minfo.name)
        try:
            old = ast.literal_eval(str(attr))
        except:
            return False
        try:
            new = ast.literal_eval(text)
        except:
            return False
        return type(new) == type(old)


enamldef DefaultEditor(Field): 
    attr minfo
    validator = DefaultValidator(minfo=minfo)
    text << str(getattr(minfo.model, minfo.name))
    text ::
        model, name = minfo.model, minfo.name
        attr = getattr(model, name)
        if isinstance(attr, str):
            setattr(model, name, text)
        else:
            try:
                setattr(model, name, value)
            except:
                try:
                    value = ast.literal_eval(text)
                    setattr(model, name, value)
                except:
                    text = str(attr)


# Dictionary from atom_type -> enaml component factories.
ATOM2ENAML = {
    Bool: lambda atom_type: BoolEditor,
    Enum: lambda atom_type: EnumEditor,
    Float: lambda atom_type: FloatEditor,
    Int: lambda atom_type: IntEditor,
    Long: lambda atom_type: IntEditor,
    Unicode: lambda atom_type: StrEditor,
    Str: lambda atom_type: StrEditor,
    Range: lambda atom_type: IntRangeEditor,
    FloatRange: lambda atom_type: FloatRangeEditor,
    DefaultEditor: lambda atom_type: DefaultEditor}
