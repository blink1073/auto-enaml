
import ast
from string import capwords
from enaml.core.api import Include
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import (
    CheckBox, ComboBox, DateSelector, Field, Form, Container,
    Label, PushButton, SpinBox, TimeSelector, Window)
from enaml.validator import Validator  
from atom.api import (Bool, Enum, Float, Int, Range, Unicode, Str,
                      FloatRange, Long, Value)
from utils import MInfo, Partial


def _get_editor(model, name):   
    minfo = MInfo(model, name)
    factory = ATOM2ENAML.get(type(minfo.member), ATOM2ENAML[DefaultEditor])
    editor = factory(minfo.member)
    return editor(minfo=minfo)


def _check_minfo(parent):
    minfo = parent.minfo
    if isinstance(minfo, tuple) and len(minfo) == 2:
        parent.minfo = minfo = MInfo(model=minfo[0], name=minfo[1])
    if not isinstance(minfo, MInfo):
        raise TypeError("minfo must be a tuple of (model, name)")


def _update_item(item):
    _check_minfo(item)
    minfo = item.minfo
    item.label.text = capwords(minfo.name.replace('_', ' '))
    item.editor = _get_editor(minfo.model, minfo.name)
    for w in [item.label, item.editor]:
        w.tool_tip = item.tool_tip
        w.status_tip = item.status_tip
        w.font = item.font


enamldef AutoItem(Form): _item:
    attr minfo
    attr editor = Field()
    attr centerline = 0.3
    padding = 0
    constraints = [lbl.width == editor.width * centerline]
    alias label: lbl
    Label: lbl: pass
    Include: inc: 
        objects << [editor]
    initialized :: _update_item(_item)
    minfo :: _update_item(_item)


def _set_auto_view(model, mitems, centerline):
    from auto_view import auto_item  # avoid circular import
    items = []
    if mitems is None:
        mitems = [m for m in model.members() if not m.startswith('_')]
        mitems = sorted(mitems)
    for mitem in mitems:
        if isinstance(mitem, str):
            items.append(auto_item((model, mitem), centerline=centerline))
        elif isinstance(mitem, Partial):
            mitem.kwargs['centerline'] = centerline
            items.append(auto_item((model, mitem.name), **mitem.kwargs))
        else:
            items.append(mitem)
    return items


enamldef AutoView(Container):
    attr model
    attr mitems
    attr centerline = 0.3
    padding = 5
    alias objects: inc.objects
    Include: inc: 
        objects << _set_auto_view(model, mitems, centerline)


enamldef AutoWindow(Window): _win:
    attr model
    title = "Edit Properties"
    Include:
        objects << [AutoItem((model, name)) 
                    for name in sorted(model.members.keys()) 
                    if not name.startswith('_')]


enamldef PyAutoView(Container): _view:
    attr objects
    padding = 5
    Include: objects << _view.objects


enamldef PyAutoWindow(Window): _win:
    attr view
    title = "Edit Properties"
    Include: objects << [_win.view]


enamldef BoolEditor(CheckBox):
    attr minfo
    minfo :: _check_minfo(parent)
    checked := getattr(minfo.model, minfo.name)


enamldef EnumEditor(ComboBox):
    attr minfo
    minfo :: _check_minfo(parent)
    index << minfo.validator.index(getattr(minfo.model, minfo.name))
    index ::
        item_value = minfo.validator[self.index]
        setattr(minfo.model, minfo.name, item_value)
    items = list(minfo.validator)


enamldef FloatEditor(FloatField):
    attr minfo
    minfo :: _check_minfo(parent)
    value := getattr(minfo.model, minfo.name)


enamldef FloatRangeEditor(FloatField):
    attr minfo
    minfo :: _check_minfo(parent)
    value := getattr(minfo.model, minfo.name)
    minimum = minfo.validator[0]
    maximum = minfo.validator[1]


enamldef IntEditor(IntField):
    attr minfo
    minfo :: _check_minfo(parent)
    value << int(getattr(minfo.model, minfo.name))
    value :: setattr(minfo.model, minfo.name, int(value))


enamldef IntRangeEditor(SpinBox):
    attr minfo
    minfo :: _check_minfo(parent)
    value := getattr(minfo.model, minfo.name)
    minimum = minfo.validator[0]
    maximum = minfo.validator[1]


enamldef StrEditor(Field):
    attr minfo
    minfo :: _check_minfo(parent)
    text := getattr(minfo.model, minfo.name)


class DefaultValidator(Validator):
    minfo = Value()

    def validate(self, text):
        attr = self.minfo.value
        try:
            old = ast.literal_eval(str(attr))
        except:
            return False
        try:
            new = ast.literal_eval(text)
        except:
            return False
        return type(new) == type(old)


enamldef DefaultEditor(Field): 
    attr minfo
    validator = DefaultValidator(minfo=minfo)
    minfo :: _check_minfo(parent)
    text << str(minfo.value)
    text ::
        model, name = minfo.model, minfo.name
        if isinstance(minfo.value, str):
            setattr(model, name, text)
        else:
            try:
                setattr(model, name, value)
            except:
                try:
                    value = ast.literal_eval(text)
                    setattr(model, name, value)
                except:
                    text = str(minfo.value)


# Dictionary from atom_type -> enaml component factories.
ATOM2ENAML = {
    Bool: lambda atom_type: BoolEditor,
    Enum: lambda atom_type: EnumEditor,
    Float: lambda atom_type: FloatEditor,
    Int: lambda atom_type: IntEditor,
    Long: lambda atom_type: IntEditor,
    Unicode: lambda atom_type: StrEditor,
    Str: lambda atom_type: StrEditor,
    Range: lambda atom_type: IntRangeEditor,
    FloatRange: lambda atom_type: FloatRangeEditor,
    DefaultEditor: lambda atom_type: DefaultEditor}
